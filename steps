1. why the name
   http://en.wikipedia.org/wiki/Grep

1. grep -i 
   grep -v
   grep [sS]till
    
   peter:~$ grep -w 'hello' hello 
   hello
   peter:~$ grep 'hello\>' hello 
   hello
   syshello
   peter:~$ grep '\<hello' hello

1. grep is not very smart on handling files, as it should, as a Unix tool, grep focus on string search.
   so we have `find`
   
        grep -R
        ps aux|grep -i firefox|grep -v "grep"|awk '{print $2}'

        peter:~/edocs$ grep awk `find .`
                       find . -exec grep awk {} +

                       echo "awk hello">newfile
                       grep awk `find . -mmin -3`
   
   grep does not do substitution, we have sed, perl, ruby...  
    
      perl -pi -e 's/you/me/g' file

        #!/bin/bash
        # change all ii into bb for all files in $PWD
        # like vim bufdo 
        for file in `find . -type f`
        do
            sed -i 's/ii/bb/g' $file
        done

   grep does not good at inline processing, so we have awk and cut

      grep "driver"|cut -d\, f1,3

1. read log file

        tail -f log/development.log |grep --context=6 SELECT

1. vim

   :grep
   :set grepprg=/bin/grep -nH 
   :grep hello *
   :cwin

   so no mater in vim or not, grep is sometimes too complex to use

1.  there is simply too much to bear in mind, so we have our script

   1. maybe you want to use certain tool for certain task, like ack-grep
   1. my very simple task
      1. ignore .git
      1. open with vim quickly
      1. so first I have happygrep.sh
      1. then ncurse happygrep

